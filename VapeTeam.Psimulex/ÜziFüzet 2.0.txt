Csak, hgoy ez is lehessen.

2008.09.02.

Hiba :
"i++" -> i ismer fel (ez nemjó)
"++i++"	-> (++ (i ++)) (ez jó)

Változók, Identifier használatánál nem mûködik a móka. :
a+b+c -> a lesz

Minden kulcsszót, egyebet felvettem Lexikai szabálynak. A szétválasztás után lehet a maradékot megcsinálni.
... Amit nem bírtma megcsinálni.

A tesztkörnyezetbeni változtatások : 
- Ha a save and closera kattolsz, akkor ment bezárás elõtt és
következõ megnyitáskór a mentett hozza elõ + archivál mindent,
ha netán egy jó teszteset kéne újra, még jólehet.
- A szintax highlightot bekapcsoltam, lényegében ezzel :)
- F5,F6,F7,F8 -ra fordít ( Simulexbõl néztem ki, hgoy csináltad, ezzel si újat tanultam :) )

--------------------------------

2008.09.02. 22:45 - pody

1. Elsõ megjegyzés, a grammar fájllal kapcsolatban: minek elnevezni minden tokent? Fõleg a P:'+' és M:'-' és egyéb formációk nem túl szimpik számomra.

2. Szintén a grammarhez, muszáj a nagy kezdõbetûs és nagybetûs neveket mindenhova felvenni? Lehet hogy célszerûbb volna írni egy saját TokenStream-et, ami ha nem character vagy string literált olvas, akkor ToLower-t hív az aktuális karakterre.

3. Az a+b+c problémát egyszerû volt javítani. Nem is értem, hogy ha sikeresen másoltad a nyelvtan egy részét, akkor miért variálsz bele ilyet:

expression
	:	assignment
	|	conditionalOrExpression
	;
assignment
	:	leftValue (assignmentOperator^ expression)?
	
Gondolom ránézésre te is látod, hogy minden "leftvalue" jó egy expressionnek, mert az assignment nyelvtani szabály farka opcionális lett. A módosított nyelvtant bekommitáltam.

Ha van még valami gond írj. Most eszek és még talán Core-ozok.

2008.09.03. 04:00 - vari

1. Elõzõ verzióban is el volt nevezve, igaz teljes nevük volt. Rövidítettem.
a) Nelegyenek elnevezve ?
b) Rendes nevük legyen ?

Mindkettõ könnyen kivitelezhetõ. Mond, milyen lenne szebb, praktikusabb olyan lesz.

2. Alapvetõen igazad van. Mivel nagyon hamar megvolt, azért kopogtam be, mint egy megoldás a témára.
   Igazából a csupa kisbetû, ahogy mindenhol van is tökéletes lenne. Gondoltam kivenni pillanatok alatt megvan.
   
3. Az elgondolás amiért ilyen lett, hogy lehessen vele csupáncsak a.a(); parancsot írni.
   Igazából átsíklottam mindannyiszor felette, amikro kerestem hol a hiba.
   A mellékelt JAVA minta és a régi Simulex-es .g -t ötvöztem. Próbáltam kicsit letisztítani.
   
Változások :
-	Átírtam normális nevûekre az idétlen rövidítéseimet. :)
Azért is neveztem el mindent, hogy majd szépen lehessen PsimulexLexer.Pluss hivatkozni. Persze tudom, ez is megoldható ezermásféleképp,
de ez volt szimpi. Ha nem nevezem el, akor az ANTLR nevezi el generált névvel, gondoltam, akkor legyen szép.
-	Kijavítottam még egy apró hibát és most elméletielg a teljes Expression szekció mûködik. ( Teszteltem )
-	Szelektorok, struktúra definiálás, globális változók, függvény definiálás tesztelve és mûködik
-	A vezérlési szerkezeteket nem teszteltem agyon még, de egyébként azok is mennek.
	Azaz, elméletielg az egész megy.

#-#	Lényegében véve, elsõ nekifutásra összeállt a nyelvtan.
	2 dolog van vele a köv körre : 
		° Lambdakalkulus ezt még kicsit tanulmányozgatom, mûvelõdök, de már van elképzelés.
		° A Tree Parser, ezügyben, ha tudsz segíts légyszíves.
		Nekem egy elképzelésem van, amit 2 fájlban "tudhatnék" megvalósítani, erre látam mintát.
		
		
2008.09.03. 14:30 - vari

1. Lambda belemûtve.
	// Anomália. Egyenlõre nemtudom miért. A (int)
	id(int) = a => a;
	
Igazából, lehet, hogy nem is kell. Sõt. Fölösleges 2 helyen jelezni a típust.
Javaslatom a C# -os analógiához képest, hogy a fv pointernél cska visszatérési érték típusát lehessen emghatározni, 
a paraméterekét a lambda kifejezésben.

PL így :
int add = (int a, int b) => a + b;

2. Csináltam egy teszt mappát. Oda adogatom hozzá a teszteket + a teszt.psi, az a legutoljára használt lesz.
Legalább is remélem :)